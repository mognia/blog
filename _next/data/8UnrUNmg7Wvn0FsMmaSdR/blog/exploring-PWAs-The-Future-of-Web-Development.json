{"pageProps":{"postData":{"mdxSource":"var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var k=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),v=(a,e)=>{for(var i in e)r(a,i,{get:e[i],enumerable:!0})},o=(a,e,i,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of u(e))!w.call(a,s)&&s!==i&&r(a,s,{get:()=>e[s],enumerable:!(t=p(e,s))||t.enumerable});return a};var f=(a,e,i)=>(i=a!=null?d(m(a)):{},o(e||!a||!a.__esModule?r(i,\"default\",{value:a,enumerable:!0}):i,a)),g=a=>o(r({},\"__esModule\",{value:!0}),a);var l=k((T,c)=>{c.exports=_jsx_runtime});var W={};v(W,{default:()=>N,frontmatter:()=>y});var n=f(l()),y={title:\"Discover PWAs The Future of Web Apps Unleashed.\",date:\"2023-7-17\",tags:[\"javascript\",\"PWA\",\"web-development\"],draft:!1,summary:\"Embark on a Journey of Exploration as We Unveil PWAs - The Revolutionary Future of Web Applications Redefined\"};function h(a){let e=Object.assign({h1:\"h1\",a:\"a\",span:\"span\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",pre:\"pre\"},a.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.h1,{id:\"what-is-pwa\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",href:\"#what-is-pwa\",tabIndex:\"-1\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What is PWA?\"]}),(0,n.jsx)(e.p,{children:\"A Progressive Web App (PWA) is a web app that enhances the user experience, integrates new capabilities, and can be installed anywhere, on any device. It looks like any other app and works offline or with poor network connectivity, ensuring uninterrupted usage.\"}),(0,n.jsx)(e.p,{children:\"The PWA application is nothing more than a traditional app plus a service worker and a manifest file. The service worker is a script that runs in the background and handles tasks such as caching, push notifications, and background synchronization. It allows the PWA to function offline and load quickly, even on slow networks. The manifest file, on the other hand, provides metadata about the app, such as its name, icons, and display preferences, making it appear and behave like a native app on the user's device.\"}),(0,n.jsxs)(e.h1,{id:\"web-app-manifest\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",href:\"#web-app-manifest\",tabIndex:\"-1\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Web app manifest:\"]}),(0,n.jsx)(e.p,{children:\"The web app manifest is a JSON file that informs the browser about a Progressive Web App's (PWA) display and behavior. It includes information about the app's name, icons, colors, orientation, starting URL, scope, and display mode. This allows PWAs to offer a native-like experience, launching from the home screen or app drawer, and retaining their unique look and feel within the operating system.\"}),(0,n.jsxs)(e.h1,{id:\"service-workers\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",href:\"#service-workers\",tabIndex:\"-1\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Service workers:\"]}),(0,n.jsx)(e.p,{children:\"When an app asks for something that the service worker covers, even if the user is offline, the service worker steps in and acts like a network proxy. It checks if it can give the app what it needs from the Cache Storage API, from the network like usual, or if it can make it up using a local algorithm. That way, you can give the app an experience similar to a regular app that's already on your device. And, if needed, the service worker can even work without an internet connection.\"}),(0,n.jsx)(e.p,{children:\"Service workers are able to handle push notifications and background sync, allowing them to perform tasks even when the app is not actively running. This enables features such as sending updates or syncing data in the background, enhancing the overall user experience. Additionally, service workers can also help improve performance by caching frequently accessed resources, reducing the need for repeated network requests.\"}),(0,n.jsx)(\"p\",{className:\"text-blogInfo\",children:\"There is only one service worker per PWA, but that doesn't mean you need to place the code in only one file. A service worker can include other files using importScripts in every browser or using ECMAScript module imports in some modern browsers.\"}),(0,n.jsxs)(e.h1,{id:\"service-workerss-scope\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",href:\"#service-workerss-scope\",tabIndex:\"-1\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Service workers's scope:\"]}),(0,n.jsxs)(e.p,{children:[\"The location of your service worker's folder defines what it can control. For instance, if the service worker is at \",(0,n.jsx)(e.code,{children:\"example.com/my-pwa/sw.js\"}),\", it can manage any navigation in the my-pwa path or below, like\",(0,n.jsx)(e.code,{children:\" example.com/my-pwa/demos/\"}),'. The service worker can only control pages, workers, and other \"clients\" that are within its scope.']}),(0,n.jsx)(e.p,{children:\"The scope is relevant for both browser tabs and PWA windows. Each scope can have only one service worker. When it's active and running, typically only one copy is available, regardless of how many clients are in use (such as PWA windows or browser tabs).\"}),(0,n.jsxs)(e.h1,{id:\"life-cycle-of-service-workers\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",href:\"#life-cycle-of-service-workers\",tabIndex:\"-1\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Life Cycle of Service Workers:\"]}),(0,n.jsx)(e.ul,{children:(0,n.jsx)(e.li,{children:\"registering:\"})}),(0,n.jsx)(e.p,{children:\"The service worker lifecycle begins with the service worker registration process. This involves the browser downloading and analyzing the service worker file. The registration process occurs when a page asks for a service worker.\"}),(0,n.jsx)(e.ul,{children:(0,n.jsx)(e.li,{children:\"installing :\"})}),(0,n.jsx)(e.p,{children:\"If the browser is able to analyze the service worker file without any errors, it will trigger the install event. This event only happens once during the service worker's lifetime. The installation process occurs automatically, without needing the user's permission, even if the user doesn't install the PWA on their device. Service worker installation takes place only when a registered service worker exists and the file can be interpreted as JavaScript without errors during its initial run. Installing the service worker on the browser allows it to run in the background and perform tasks such as caching resources. On the other hand, installing on the client involves downloading and setting up the PWA on the user's device, enabling them to access it directly from their home screen.\"}),(0,n.jsx)(e.ul,{children:(0,n.jsx)(e.li,{children:\"activating:\"})}),(0,n.jsx)(e.p,{children:\"After installation, the service worker can't control its clients, including your PWA, until it's activated. Once it's ready, the activation event will occur. However, the page that registered the service worker won't be managed by default. The service worker won't take control until the next time you navigate to that page by reloading it or reopening the PWA. You can monitor events in the service worker's global scope using the self object.\"}),(0,n.jsx)(e.pre,{className:\"language-js\",children:(0,n.jsxs)(e.code,{className:\"language-js code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token comment\",children:\"// This code executes in its own worker or thread\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"self\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),(0,n.jsx)(e.span,{className:\"token function method property-access\",children:\"addEventListener\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsx)(e.span,{className:\"token string\",children:'\"install\"'}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,n.jsx)(e.span,{className:\"token parameter\",children:\"event\"}),\" \",(0,n.jsx)(e.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token class-name console\",children:\"console\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),(0,n.jsx)(e.span,{className:\"token function method property-access\",children:\"log\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsx)(e.span,{className:\"token string\",children:'\"Service worker installed\"'}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"self\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),(0,n.jsx)(e.span,{className:\"token function method property-access\",children:\"addEventListener\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsx)(e.span,{className:\"token string\",children:'\"activate\"'}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,n.jsx)(e.span,{className:\"token parameter\",children:\"event\"}),\" \",(0,n.jsx)(e.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token class-name console\",children:\"console\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),(0,n.jsx)(e.span,{className:\"token function method property-access\",children:\"log\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsx)(e.span,{className:\"token string\",children:'\"Service worker activated\"'}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]})]})}),(0,n.jsxs)(e.h1,{id:\"updating-a-service-worker\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",href:\"#updating-a-service-worker\",tabIndex:\"-1\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Updating a Service Worker:\"]}),(0,n.jsx)(e.p,{children:`When the browser detects that there's a new version of a service worker file (from your server) that's different from the current one, it will update the service worker. However, the new version won't activate until the old one is no longer controlling any clients, which is called the \"waiting\" state. This ensures only one version of the service worker runs at a time. Refreshing or reopening the page won't activate the new version. To activate the new service worker, the user must close or navigate away from all tabs and windows that use the old version, then go back to the page.`}),(0,n.jsxs)(e.h1,{id:\"caching\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",href:\"#caching\",tabIndex:\"-1\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"caching:\"]}),(0,n.jsx)(e.p,{children:\"You can take advantage of the Cache Storage API to download, save, remove, or modify assets on the device. Once saved, these assets can be returned and served on the device without requiring a network request. By effectively implementing caches, you can make your web application accessible offline and serve assets quickly, independent of network conditions.\"}),(0,n.jsxs)(e.h1,{id:\"what-to-cache\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",href:\"#what-to-cache\",tabIndex:\"-1\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What to cache:\"]}),(0,n.jsx)(e.p,{children:\"When it comes to caching, a common question is what resources to cache. While there's no certain answer, a good starting point is to cache all the essential resources required to render the user interface.\"}),(0,n.jsx)(\"p\",{className:\"text-blogWarning\",children:\"When caching assets, it's important to keep in mind that you're downloading and storing them on users' devices. Therefore, it's important to use that space and bandwidth responsibly. You must find a balance between having enough on-device assets to render a quick or offline experience while also avoiding downloading too much data.\"}),(0,n.jsxs)(e.h1,{id:\"caching-approaches\",children:[(0,n.jsx)(e.a,{\"aria-hidden\":\"true\",href:\"#caching-approaches\",tabIndex:\"-1\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Caching approaches\"]}),(0,n.jsxs)(e.ul,{children:[(0,n.jsx)(e.li,{children:(0,n.jsx)(e.p,{children:\"Cache First: This approach searches for a cached response before making a request to the network. If a cached response is found, it is returned; otherwise, a network request is made.\"})}),(0,n.jsx)(e.li,{children:(0,n.jsx)(e.p,{children:\"Network First: In this strategy, a request is made to the network first to fetch a response. If a response is received, it is returned; otherwise, the cache is checked for the requested asset.\"})}),(0,n.jsx)(e.li,{children:(0,n.jsx)(e.p,{children:\"Stale While Re-validate:\"})})]}),(0,n.jsx)(e.p,{children:\"This method serves a response from the cache while making a background request for the latest version. The latest version is then saved to the cache for future requests.\"}),(0,n.jsx)(e.ul,{children:(0,n.jsx)(e.li,{children:\"Network-Only :\"})}),(0,n.jsx)(e.p,{children:\"This approach always returns a response from the network and never consults the cache. If no response is received, an error is returned.\"}),(0,n.jsx)(e.ul,{children:(0,n.jsx)(e.li,{children:\"Cache-Only:\"})}),(0,n.jsx)(e.p,{children:\"This strategy always responds with a cached version of the requested asset and never makes network requests. To use this method, assets must be added to the cache before they are requested. If the requested asset is not found in the cache, an error is returned.\"})]})}function b(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(h,a)})):h(a)}var N=b;return g(W);})();\n;return Component;","toc":[{"value":"What is PWA?","url":"#what-is-pwa","depth":1},{"value":"Web app manifest:","url":"#web-app-manifest","depth":1},{"value":"Service workers:","url":"#service-workers","depth":1},{"value":"Service workers's scope:","url":"#service-workerss-scope","depth":1},{"value":"Life Cycle of Service Workers:","url":"#life-cycle-of-service-workers","depth":1},{"value":"Updating a Service Worker:","url":"#updating-a-service-worker","depth":1},{"value":"caching:","url":"#caching","depth":1},{"value":"What to cache:","url":"#what-to-cache","depth":1},{"value":"Caching approaches","url":"#caching-approaches","depth":1}],"frontMatter":{"readingTime":{"text":"7 min read","minutes":6.33,"time":379800,"words":1266},"slug":"exploring-PWAs-The-Future-of-Web-Development","fileName":"Discover PWAs The Future of Web Apps Unleashed..mdx","title":"Discover PWAs The Future of Web Apps Unleashed.","date":"2023-07-17T00:00:00.000Z","tags":["javascript","PWA","web-development"],"draft":false,"summary":"Embark on a Journey of Exploration as We Unveil PWAs - The Revolutionary Future of Web Applications Redefined"}},"prev":{"root":"","dir":"","base":"exploring-the-Power-of-Arrays.mdx","ext":".mdx","name":"exploring-the-Power-of-Arrays"},"next":null},"__N_SSG":true}